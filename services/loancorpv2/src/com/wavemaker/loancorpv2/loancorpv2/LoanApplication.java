/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * LoanApplication generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`loan_application`")
public class LoanApplication implements Serializable {

    private Integer id;
    private Integer cdId;
    private Timestamp creationTime;
    private Integer ldId;
    private String loanType;
    private Integer customerDetailsId;
    private Integer loanDetailsId;
    private String status;
    private CustomerDetails customerDetails;
    private LoanDetails loanDetails;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`cd_id`", nullable = true, scale = 0, precision = 10)
    public Integer getCdId() {
        return this.cdId;
    }

    public void setCdId(Integer cdId) {
        this.cdId = cdId;
    }

    @Column(name = "`creation_time`", nullable = false)
    public Timestamp getCreationTime() {
        return this.creationTime;
    }

    public void setCreationTime(Timestamp creationTime) {
        this.creationTime = creationTime;
    }

    @Column(name = "`ld_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLdId() {
        return this.ldId;
    }

    public void setLdId(Integer ldId) {
        this.ldId = ldId;
    }

    @Column(name = "`loan_type`", nullable = true, length = 255)
    public String getLoanType() {
        return this.loanType;
    }

    public void setLoanType(String loanType) {
        this.loanType = loanType;
    }

    @Column(name = "`customer_details_id`", nullable = true, scale = 0, precision = 10)
    public Integer getCustomerDetailsId() {
        return this.customerDetailsId;
    }

    public void setCustomerDetailsId(Integer customerDetailsId) {
        this.customerDetailsId = customerDetailsId;
    }

    @Column(name = "`loan_details_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLoanDetailsId() {
        return this.loanDetailsId;
    }

    public void setLoanDetailsId(Integer loanDetailsId) {
        this.loanDetailsId = loanDetailsId;
    }

    @Column(name = "`status`", nullable = true, length = 255)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`customer_details_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_loan_application_TO_cqVNQl`"))
    @Fetch(FetchMode.JOIN)
    public CustomerDetails getCustomerDetails() {
        return this.customerDetails;
    }

    public void setCustomerDetails(CustomerDetails customerDetails) {
        if(customerDetails != null) {
            this.customerDetailsId = customerDetails.getId();
        }

        this.customerDetails = customerDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`loan_details_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_loan_application_TO_l3laqe`"))
    @Fetch(FetchMode.JOIN)
    public LoanDetails getLoanDetails() {
        return this.loanDetails;
    }

    public void setLoanDetails(LoanDetails loanDetails) {
        if(loanDetails != null) {
            this.loanDetailsId = loanDetails.getId();
        }

        this.loanDetails = loanDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LoanApplication)) return false;
        final LoanApplication loanApplication = (LoanApplication) o;
        return Objects.equals(getId(), loanApplication.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
