/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.CommTrail;
import com.wavemaker.loancorpv2.loancorpv2.service.CommTrailService;


/**
 * Controller object for domain model class CommTrail.
 * @see CommTrail
 */
@RestController("loancorpv2.CommTrailController")
@Api(value = "CommTrailController", description = "Exposes APIs to work with CommTrail resource.")
@RequestMapping("/loancorpv2/CommTrail")
public class CommTrailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommTrailController.class);

    @Autowired
	@Qualifier("loancorpv2.CommTrailService")
	private CommTrailService commTrailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CommTrail instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CommTrail createCommTrail(@RequestBody CommTrail commTrail) {
		LOGGER.debug("Create CommTrail with information: {}" , commTrail);

		commTrail = commTrailService.create(commTrail);
		LOGGER.debug("Created CommTrail with information: {}" , commTrail);

	    return commTrail;
	}

    @ApiOperation(value = "Returns the CommTrail instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CommTrail getCommTrail(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CommTrail with id: {}" , id);

        CommTrail foundCommTrail = commTrailService.getById(id);
        LOGGER.debug("CommTrail details with id: {}" , foundCommTrail);

        return foundCommTrail;
    }

    @ApiOperation(value = "Updates the CommTrail instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CommTrail editCommTrail(@PathVariable("id") Integer id, @RequestBody CommTrail commTrail) {
        LOGGER.debug("Editing CommTrail with id: {}" , commTrail.getId());

        commTrail.setId(id);
        commTrail = commTrailService.update(commTrail);
        LOGGER.debug("CommTrail details with id: {}" , commTrail);

        return commTrail;
    }
    
    @ApiOperation(value = "Partially updates the CommTrail instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CommTrail patchCommTrail(@PathVariable("id") Integer id, @RequestBody @MapTo(CommTrail.class) Map<String, Object> commTrailPatch) {
        LOGGER.debug("Partially updating CommTrail with id: {}" , id);

        CommTrail commTrail = commTrailService.partialUpdate(id, commTrailPatch);
        LOGGER.debug("CommTrail details after partial update: {}" , commTrail);

        return commTrail;
    }

    @ApiOperation(value = "Deletes the CommTrail instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCommTrail(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CommTrail with id: {}" , id);

        CommTrail deletedCommTrail = commTrailService.delete(id);

        return deletedCommTrail != null;
    }

    /**
     * @deprecated Use {@link #findCommTrails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CommTrail instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CommTrail> searchCommTrailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CommTrails list by query filter:{}", (Object) queryFilters);
        return commTrailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CommTrail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CommTrail> findCommTrails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CommTrails list by filter:", query);
        return commTrailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CommTrail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CommTrail> filterCommTrails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CommTrails list by filter", query);
        return commTrailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCommTrails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return commTrailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCommTrailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CommTrail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> commTrailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CommTrail instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCommTrails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CommTrails");
		return commTrailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCommTrailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return commTrailService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CommTrailService instance
	 */
	protected void setCommTrailService(CommTrailService service) {
		this.commTrailService = service;
	}

}
