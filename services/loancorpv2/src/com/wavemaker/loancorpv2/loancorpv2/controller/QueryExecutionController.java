/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.wavemaker.loancorpv2.loancorpv2.service.Loancorpv2QueryExecutorService;
import com.wavemaker.loancorpv2.loancorpv2.models.query.*;

@RestController(value = "Loancorpv2.QueryExecutionController")
@RequestMapping("/loancorpv2/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Loancorpv2QueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @GetMapping(value = "/queries/getloanappdetails")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getloanappdetails")
    public Page<GetloanappdetailsResponse> executeGetloanappdetails(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getloanappdetails");
        Page<GetloanappdetailsResponse> _result = queryService.executeGetloanappdetails(pageable);
        LOGGER.debug("got the result for named query: getloanappdetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getloanappdetails")
    @PostMapping(value = "/queries/getloanappdetails/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetloanappdetails(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getloanappdetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getloanappdetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetloanappdetails( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @PutMapping(value = "/queries/updateLoanApplicationStatus")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update loan Application Status")
    public IntegerWrapper executeUpdateLoanApplicationStatus(@Valid @RequestBody UpdateLoanApplicationStatusRequest updateLoanApplicationStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateLoanApplicationStatus");
        Integer _result = queryService.executeUpdateLoanApplicationStatus(updateLoanApplicationStatusRequest);
        LOGGER.debug("got the result for named query: updateLoanApplicationStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @GetMapping(value = "/queries/GetPendingLoans")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get All Pensing loans")
    public Page<GetPendingLoansResponse> executeGetPendingLoans(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GetPendingLoans");
        Page<GetPendingLoansResponse> _result = queryService.executeGetPendingLoans(pageable);
        LOGGER.debug("got the result for named query: GetPendingLoans, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GetPendingLoans")
    @PostMapping(value = "/queries/GetPendingLoans/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetPendingLoans(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetPendingLoans");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GetPendingLoans";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPendingLoans( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/validateUser")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "validating user ligin")
    public Page<ValidateUserResponse> executeValidateUser(@RequestParam(value = "id") String id, @RequestParam(value = "pswd") String pswd, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: validateUser");
        Page<ValidateUserResponse> _result = queryService.executeValidateUser(id, pswd, pageable);
        LOGGER.debug("got the result for named query: validateUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query validateUser")
    @PostMapping(value = "/queries/validateUser/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportValidateUser(@RequestParam(value = "id") String id, @RequestParam(value = "pswd") String pswd, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: validateUser");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "validateUser";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportValidateUser(id, pswd,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/test_customer_details")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This is customer details.")
    public Page<TestCustomerDetailsResponse> executeTest_customer_details(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: test_customer_details");
        Page<TestCustomerDetailsResponse> _result = queryService.executeTest_customer_details(id, pageable);
        LOGGER.debug("got the result for named query: test_customer_details, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query test_customer_details")
    @PostMapping(value = "/queries/test_customer_details/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTest_customer_details(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: test_customer_details");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "test_customer_details";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTest_customer_details(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getCustomerLoanDetails")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get customer Loan Details")
    public Page<GetCustomerLoanDetailsResponse> executeGetCustomerLoanDetails(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCustomerLoanDetails");
        Page<GetCustomerLoanDetailsResponse> _result = queryService.executeGetCustomerLoanDetails(id, pageable);
        LOGGER.debug("got the result for named query: getCustomerLoanDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCustomerLoanDetails")
    @PostMapping(value = "/queries/getCustomerLoanDetails/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetCustomerLoanDetails(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCustomerLoanDetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCustomerLoanDetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCustomerLoanDetails(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getKycImage")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get kyc image")
    public Page<GetKycImageResponse> executeGetKycImage(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getKycImage");
        Page<GetKycImageResponse> _result = queryService.executeGetKycImage(id, pageable);
        LOGGER.debug("got the result for named query: getKycImage, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{id1}/content/{_fieldName_}");
        for(GetKycImageResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("id1", _content.getId());
            _properties.put("_fieldName_", "kycImage");
            if(_content.getKycImage() != null) {
                _content.setKycImage(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setKycImage(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property kycImage in query getKycImage")
    @GetMapping(value = "/queries/getKycImage/{id1}/content/kycImage", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getKycImageContentForGetKycImage(@PathVariable("id1") Long id1, @RequestParam(value = "id") String id, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getKycImage");

        InputStream _result = queryService.getKycImageContentForGetKycImage(id1, id);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query getKycImage")
    @PostMapping(value = "/queries/getKycImage/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetKycImage(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getKycImage");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getKycImage";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetKycImage(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getCustomerId")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get customer id")
    public Page<GetCustomerIdResponse> executeGetCustomerId(@RequestParam(value = "id") String id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCustomerId");
        Page<GetCustomerIdResponse> _result = queryService.executeGetCustomerId(id, pageable);
        LOGGER.debug("got the result for named query: getCustomerId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCustomerId")
    @PostMapping(value = "/queries/getCustomerId/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetCustomerId(@RequestParam(value = "id") String id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCustomerId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCustomerId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCustomerId(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}
