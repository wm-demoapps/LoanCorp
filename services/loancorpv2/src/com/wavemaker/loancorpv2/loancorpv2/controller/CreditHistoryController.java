/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;
import com.wavemaker.loancorpv2.loancorpv2.CreditHistory;
import com.wavemaker.loancorpv2.loancorpv2.service.CreditHistoryService;


/**
 * Controller object for domain model class CreditHistory.
 * @see CreditHistory
 */
@RestController("loancorpv2.CreditHistoryController")
@Api(value = "CreditHistoryController", description = "Exposes APIs to work with CreditHistory resource.")
@RequestMapping("/loancorpv2/CreditHistory")
public class CreditHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditHistoryController.class);

    @Autowired
	@Qualifier("loancorpv2.CreditHistoryService")
	private CreditHistoryService creditHistoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CreditHistory instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditHistory createCreditHistory(@RequestBody CreditHistory creditHistory) {
		LOGGER.debug("Create CreditHistory with information: {}" , creditHistory);

		creditHistory = creditHistoryService.create(creditHistory);
		LOGGER.debug("Created CreditHistory with information: {}" , creditHistory);

	    return creditHistory;
	}

    @ApiOperation(value = "Returns the CreditHistory instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditHistory getCreditHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CreditHistory with id: {}" , id);

        CreditHistory foundCreditHistory = creditHistoryService.getById(id);
        LOGGER.debug("CreditHistory details with id: {}" , foundCreditHistory);

        return foundCreditHistory;
    }

    @ApiOperation(value = "Updates the CreditHistory instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditHistory editCreditHistory(@PathVariable("id") Integer id, @RequestBody CreditHistory creditHistory) {
        LOGGER.debug("Editing CreditHistory with id: {}" , creditHistory.getId());

        creditHistory.setId(id);
        creditHistory = creditHistoryService.update(creditHistory);
        LOGGER.debug("CreditHistory details with id: {}" , creditHistory);

        return creditHistory;
    }
    
    @ApiOperation(value = "Partially updates the CreditHistory instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditHistory patchCreditHistory(@PathVariable("id") Integer id, @RequestBody @MapTo(CreditHistory.class) Map<String, Object> creditHistoryPatch) {
        LOGGER.debug("Partially updating CreditHistory with id: {}" , id);

        CreditHistory creditHistory = creditHistoryService.partialUpdate(id, creditHistoryPatch);
        LOGGER.debug("CreditHistory details after partial update: {}" , creditHistory);

        return creditHistory;
    }

    @ApiOperation(value = "Deletes the CreditHistory instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCreditHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CreditHistory with id: {}" , id);

        CreditHistory deletedCreditHistory = creditHistoryService.delete(id);

        return deletedCreditHistory != null;
    }

    /**
     * @deprecated Use {@link #findCreditHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CreditHistory instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditHistory> searchCreditHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CreditHistories list by query filter:{}", (Object) queryFilters);
        return creditHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CreditHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditHistory> findCreditHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CreditHistories list by filter:", query);
        return creditHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CreditHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditHistory> filterCreditHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CreditHistories list by filter", query);
        return creditHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCreditHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return creditHistoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCreditHistoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CreditHistory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> creditHistoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CreditHistory instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCreditHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CreditHistories");
		return creditHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCreditHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return creditHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/creditDetailses")
    @ApiOperation(value = "Gets the creditDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditDetails> findAssociatedCreditDetailses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated creditDetailses");
        return creditHistoryService.findAssociatedCreditDetailses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CreditHistoryService instance
	 */
	protected void setCreditHistoryService(CreditHistoryService service) {
		this.creditHistoryService = service;
	}

}
