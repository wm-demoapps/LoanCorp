/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.LoanOffers;
import com.wavemaker.loancorpv2.loancorpv2.service.LoanOffersService;


/**
 * Controller object for domain model class LoanOffers.
 * @see LoanOffers
 */
@RestController("loancorpv2.LoanOffersController")
@Api(value = "LoanOffersController", description = "Exposes APIs to work with LoanOffers resource.")
@RequestMapping("/loancorpv2/LoanOffers")
public class LoanOffersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanOffersController.class);

    @Autowired
	@Qualifier("loancorpv2.LoanOffersService")
	private LoanOffersService loanOffersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LoanOffers instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanOffers createLoanOffers(@RequestBody LoanOffers loanOffers) {
		LOGGER.debug("Create LoanOffers with information: {}" , loanOffers);

		loanOffers = loanOffersService.create(loanOffers);
		LOGGER.debug("Created LoanOffers with information: {}" , loanOffers);

	    return loanOffers;
	}

    @ApiOperation(value = "Returns the LoanOffers instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanOffers getLoanOffers(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LoanOffers with id: {}" , id);

        LoanOffers foundLoanOffers = loanOffersService.getById(id);
        LOGGER.debug("LoanOffers details with id: {}" , foundLoanOffers);

        return foundLoanOffers;
    }

    @ApiOperation(value = "Updates the LoanOffers instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanOffers editLoanOffers(@PathVariable("id") Integer id, @RequestBody LoanOffers loanOffers) {
        LOGGER.debug("Editing LoanOffers with id: {}" , loanOffers.getId());

        loanOffers.setId(id);
        loanOffers = loanOffersService.update(loanOffers);
        LOGGER.debug("LoanOffers details with id: {}" , loanOffers);

        return loanOffers;
    }
    
    @ApiOperation(value = "Partially updates the LoanOffers instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanOffers patchLoanOffers(@PathVariable("id") Integer id, @RequestBody @MapTo(LoanOffers.class) Map<String, Object> loanOffersPatch) {
        LOGGER.debug("Partially updating LoanOffers with id: {}" , id);

        LoanOffers loanOffers = loanOffersService.partialUpdate(id, loanOffersPatch);
        LOGGER.debug("LoanOffers details after partial update: {}" , loanOffers);

        return loanOffers;
    }

    @ApiOperation(value = "Deletes the LoanOffers instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLoanOffers(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LoanOffers with id: {}" , id);

        LoanOffers deletedLoanOffers = loanOffersService.delete(id);

        return deletedLoanOffers != null;
    }

    /**
     * @deprecated Use {@link #findLoanOffers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LoanOffers instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanOffers> searchLoanOffersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LoanOffers list by query filter:{}", (Object) queryFilters);
        return loanOffersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoanOffers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanOffers> findLoanOffers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoanOffers list by filter:", query);
        return loanOffersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoanOffers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanOffers> filterLoanOffers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoanOffers list by filter", query);
        return loanOffersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLoanOffers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return loanOffersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLoanOffersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LoanOffers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> loanOffersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LoanOffers instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLoanOffers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LoanOffers");
		return loanOffersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLoanOffersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return loanOffersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoanOffersService instance
	 */
	protected void setLoanOffersService(LoanOffersService service) {
		this.loanOffersService = service;
	}

}
