/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.LoginDetails;
import com.wavemaker.loancorpv2.loancorpv2.service.LoginDetailsService;


/**
 * Controller object for domain model class LoginDetails.
 * @see LoginDetails
 */
@RestController("loancorpv2.LoginDetailsController")
@Api(value = "LoginDetailsController", description = "Exposes APIs to work with LoginDetails resource.")
@RequestMapping("/loancorpv2/LoginDetails")
public class LoginDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoginDetailsController.class);

    @Autowired
	@Qualifier("loancorpv2.LoginDetailsService")
	private LoginDetailsService loginDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LoginDetails instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoginDetails createLoginDetails(@RequestBody LoginDetails loginDetails) {
		LOGGER.debug("Create LoginDetails with information: {}" , loginDetails);

		loginDetails = loginDetailsService.create(loginDetails);
		LOGGER.debug("Created LoginDetails with information: {}" , loginDetails);

	    return loginDetails;
	}

    @ApiOperation(value = "Returns the LoginDetails instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoginDetails getLoginDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LoginDetails with id: {}" , id);

        LoginDetails foundLoginDetails = loginDetailsService.getById(id);
        LOGGER.debug("LoginDetails details with id: {}" , foundLoginDetails);

        return foundLoginDetails;
    }

    @ApiOperation(value = "Updates the LoginDetails instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoginDetails editLoginDetails(@PathVariable("id") Integer id, @RequestBody LoginDetails loginDetails) {
        LOGGER.debug("Editing LoginDetails with id: {}" , loginDetails.getId());

        loginDetails.setId(id);
        loginDetails = loginDetailsService.update(loginDetails);
        LOGGER.debug("LoginDetails details with id: {}" , loginDetails);

        return loginDetails;
    }
    
    @ApiOperation(value = "Partially updates the LoginDetails instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoginDetails patchLoginDetails(@PathVariable("id") Integer id, @RequestBody @MapTo(LoginDetails.class) Map<String, Object> loginDetailsPatch) {
        LOGGER.debug("Partially updating LoginDetails with id: {}" , id);

        LoginDetails loginDetails = loginDetailsService.partialUpdate(id, loginDetailsPatch);
        LOGGER.debug("LoginDetails details after partial update: {}" , loginDetails);

        return loginDetails;
    }

    @ApiOperation(value = "Deletes the LoginDetails instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLoginDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LoginDetails with id: {}" , id);

        LoginDetails deletedLoginDetails = loginDetailsService.delete(id);

        return deletedLoginDetails != null;
    }

    /**
     * @deprecated Use {@link #findLoginDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LoginDetails instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoginDetails> searchLoginDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LoginDetails list by query filter:{}", (Object) queryFilters);
        return loginDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoginDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoginDetails> findLoginDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoginDetails list by filter:", query);
        return loginDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoginDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoginDetails> filterLoginDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoginDetails list by filter", query);
        return loginDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLoginDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return loginDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLoginDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LoginDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> loginDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LoginDetails instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLoginDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LoginDetails");
		return loginDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLoginDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return loginDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoginDetailsService instance
	 */
	protected void setLoginDetailsService(LoginDetailsService service) {
		this.loginDetailsService = service;
	}

}
