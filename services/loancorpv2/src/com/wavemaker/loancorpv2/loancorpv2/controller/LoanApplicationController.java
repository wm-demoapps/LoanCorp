/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.CommTrail;
import com.wavemaker.loancorpv2.loancorpv2.LoanApplication;
import com.wavemaker.loancorpv2.loancorpv2.LoanOffers;
import com.wavemaker.loancorpv2.loancorpv2.service.LoanApplicationService;


/**
 * Controller object for domain model class LoanApplication.
 * @see LoanApplication
 */
@RestController("loancorpv2.LoanApplicationController")
@Api(value = "LoanApplicationController", description = "Exposes APIs to work with LoanApplication resource.")
@RequestMapping("/loancorpv2/LoanApplication")
public class LoanApplicationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanApplicationController.class);

    @Autowired
	@Qualifier("loancorpv2.LoanApplicationService")
	private LoanApplicationService loanApplicationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LoanApplication instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanApplication createLoanApplication(@RequestBody LoanApplication loanApplication) {
		LOGGER.debug("Create LoanApplication with information: {}" , loanApplication);

		loanApplication = loanApplicationService.create(loanApplication);
		LOGGER.debug("Created LoanApplication with information: {}" , loanApplication);

	    return loanApplication;
	}

    @ApiOperation(value = "Returns the LoanApplication instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanApplication getLoanApplication(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LoanApplication with id: {}" , id);

        LoanApplication foundLoanApplication = loanApplicationService.getById(id);
        LOGGER.debug("LoanApplication details with id: {}" , foundLoanApplication);

        return foundLoanApplication;
    }

    @ApiOperation(value = "Updates the LoanApplication instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanApplication editLoanApplication(@PathVariable("id") Integer id, @RequestBody LoanApplication loanApplication) {
        LOGGER.debug("Editing LoanApplication with id: {}" , loanApplication.getId());

        loanApplication.setId(id);
        loanApplication = loanApplicationService.update(loanApplication);
        LOGGER.debug("LoanApplication details with id: {}" , loanApplication);

        return loanApplication;
    }
    
    @ApiOperation(value = "Partially updates the LoanApplication instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LoanApplication patchLoanApplication(@PathVariable("id") Integer id, @RequestBody @MapTo(LoanApplication.class) Map<String, Object> loanApplicationPatch) {
        LOGGER.debug("Partially updating LoanApplication with id: {}" , id);

        LoanApplication loanApplication = loanApplicationService.partialUpdate(id, loanApplicationPatch);
        LOGGER.debug("LoanApplication details after partial update: {}" , loanApplication);

        return loanApplication;
    }

    @ApiOperation(value = "Deletes the LoanApplication instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLoanApplication(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LoanApplication with id: {}" , id);

        LoanApplication deletedLoanApplication = loanApplicationService.delete(id);

        return deletedLoanApplication != null;
    }

    /**
     * @deprecated Use {@link #findLoanApplications(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LoanApplication instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanApplication> searchLoanApplicationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LoanApplications list by query filter:{}", (Object) queryFilters);
        return loanApplicationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoanApplication instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanApplication> findLoanApplications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoanApplications list by filter:", query);
        return loanApplicationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LoanApplication instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanApplication> filterLoanApplications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LoanApplications list by filter", query);
        return loanApplicationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLoanApplications(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return loanApplicationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLoanApplicationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LoanApplication.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> loanApplicationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LoanApplication instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLoanApplications( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LoanApplications");
		return loanApplicationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLoanApplicationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return loanApplicationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/commTrails")
    @ApiOperation(value = "Gets the commTrails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CommTrail> findAssociatedCommTrails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated commTrails");
        return loanApplicationService.findAssociatedCommTrails(id, pageable);
    }

    @GetMapping(value="/{id:.+}/loanOfferses")
    @ApiOperation(value = "Gets the loanOfferses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanOffers> findAssociatedLoanOfferses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated loanOfferses");
        return loanApplicationService.findAssociatedLoanOfferses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoanApplicationService instance
	 */
	protected void setLoanApplicationService(LoanApplicationService service) {
		this.loanApplicationService = service;
	}

}
