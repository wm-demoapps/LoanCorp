/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;
import com.wavemaker.loancorpv2.loancorpv2.service.CreditDetailsService;


/**
 * Controller object for domain model class CreditDetails.
 * @see CreditDetails
 */
@RestController("loancorpv2.CreditDetailsController")
@Api(value = "CreditDetailsController", description = "Exposes APIs to work with CreditDetails resource.")
@RequestMapping("/loancorpv2/CreditDetails")
public class CreditDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditDetailsController.class);

    @Autowired
	@Qualifier("loancorpv2.CreditDetailsService")
	private CreditDetailsService creditDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CreditDetails instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditDetails createCreditDetails(@RequestBody CreditDetails creditDetails) {
		LOGGER.debug("Create CreditDetails with information: {}" , creditDetails);

		creditDetails = creditDetailsService.create(creditDetails);
		LOGGER.debug("Created CreditDetails with information: {}" , creditDetails);

	    return creditDetails;
	}

    @ApiOperation(value = "Returns the CreditDetails instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditDetails getCreditDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CreditDetails with id: {}" , id);

        CreditDetails foundCreditDetails = creditDetailsService.getById(id);
        LOGGER.debug("CreditDetails details with id: {}" , foundCreditDetails);

        return foundCreditDetails;
    }

    @ApiOperation(value = "Updates the CreditDetails instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditDetails editCreditDetails(@PathVariable("id") Integer id, @RequestBody CreditDetails creditDetails) {
        LOGGER.debug("Editing CreditDetails with id: {}" , creditDetails.getId());

        creditDetails.setId(id);
        creditDetails = creditDetailsService.update(creditDetails);
        LOGGER.debug("CreditDetails details with id: {}" , creditDetails);

        return creditDetails;
    }
    
    @ApiOperation(value = "Partially updates the CreditDetails instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CreditDetails patchCreditDetails(@PathVariable("id") Integer id, @RequestBody @MapTo(CreditDetails.class) Map<String, Object> creditDetailsPatch) {
        LOGGER.debug("Partially updating CreditDetails with id: {}" , id);

        CreditDetails creditDetails = creditDetailsService.partialUpdate(id, creditDetailsPatch);
        LOGGER.debug("CreditDetails details after partial update: {}" , creditDetails);

        return creditDetails;
    }

    @ApiOperation(value = "Deletes the CreditDetails instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCreditDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CreditDetails with id: {}" , id);

        CreditDetails deletedCreditDetails = creditDetailsService.delete(id);

        return deletedCreditDetails != null;
    }

    /**
     * @deprecated Use {@link #findCreditDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CreditDetails instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditDetails> searchCreditDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CreditDetails list by query filter:{}", (Object) queryFilters);
        return creditDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CreditDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditDetails> findCreditDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CreditDetails list by filter:", query);
        return creditDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CreditDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditDetails> filterCreditDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CreditDetails list by filter", query);
        return creditDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCreditDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return creditDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCreditDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CreditDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> creditDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CreditDetails instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCreditDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CreditDetails");
		return creditDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCreditDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return creditDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CreditDetailsService instance
	 */
	protected void setCreditDetailsService(CreditDetailsService service) {
		this.creditDetailsService = service;
	}

}
