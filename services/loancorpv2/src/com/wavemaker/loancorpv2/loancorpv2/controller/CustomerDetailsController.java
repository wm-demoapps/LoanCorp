/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.CreditHistory;
import com.wavemaker.loancorpv2.loancorpv2.CustomerDetails;
import com.wavemaker.loancorpv2.loancorpv2.LoanApplication;
import com.wavemaker.loancorpv2.loancorpv2.LoginDetails;
import com.wavemaker.loancorpv2.loancorpv2.service.CustomerDetailsService;


/**
 * Controller object for domain model class CustomerDetails.
 * @see CustomerDetails
 */
@RestController("loancorpv2.CustomerDetailsController")
@Api(value = "CustomerDetailsController", description = "Exposes APIs to work with CustomerDetails resource.")
@RequestMapping("/loancorpv2/CustomerDetails")
public class CustomerDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerDetailsController.class);

    @Autowired
	@Qualifier("loancorpv2.CustomerDetailsService")
	private CustomerDetailsService customerDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CustomerDetails instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerDetails createCustomerDetails(@RequestBody CustomerDetails customerDetails) {
		LOGGER.debug("Create CustomerDetails with information: {}" , customerDetails);

		customerDetails = customerDetailsService.create(customerDetails);
		LOGGER.debug("Created CustomerDetails with information: {}" , customerDetails);

	    return customerDetails;
	}

    @ApiOperation(value = "Returns the CustomerDetails instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerDetails getCustomerDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CustomerDetails with id: {}" , id);

        CustomerDetails foundCustomerDetails = customerDetailsService.getById(id);
        LOGGER.debug("CustomerDetails details with id: {}" , foundCustomerDetails);

        return foundCustomerDetails;
    }

    @ApiOperation(value = "Updates the CustomerDetails instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerDetails editCustomerDetails(@PathVariable("id") Integer id, @RequestBody CustomerDetails customerDetails) {
        LOGGER.debug("Editing CustomerDetails with id: {}" , customerDetails.getId());

        customerDetails.setId(id);
        customerDetails = customerDetailsService.update(customerDetails);
        LOGGER.debug("CustomerDetails details with id: {}" , customerDetails);

        return customerDetails;
    }
    
    @ApiOperation(value = "Partially updates the CustomerDetails instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerDetails patchCustomerDetails(@PathVariable("id") Integer id, @RequestBody @MapTo(CustomerDetails.class) Map<String, Object> customerDetailsPatch) {
        LOGGER.debug("Partially updating CustomerDetails with id: {}" , id);

        CustomerDetails customerDetails = customerDetailsService.partialUpdate(id, customerDetailsPatch);
        LOGGER.debug("CustomerDetails details after partial update: {}" , customerDetails);

        return customerDetails;
    }

    @ApiOperation(value = "Deletes the CustomerDetails instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCustomerDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CustomerDetails with id: {}" , id);

        CustomerDetails deletedCustomerDetails = customerDetailsService.delete(id);

        return deletedCustomerDetails != null;
    }

    /**
     * @deprecated Use {@link #findCustomerDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CustomerDetails instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerDetails> searchCustomerDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CustomerDetails list by query filter:{}", (Object) queryFilters);
        return customerDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerDetails> findCustomerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerDetails list by filter:", query);
        return customerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerDetails> filterCustomerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerDetails list by filter", query);
        return customerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCustomerDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return customerDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCustomerDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CustomerDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> customerDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CustomerDetails instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCustomerDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CustomerDetails");
		return customerDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCustomerDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return customerDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/creditHistories")
    @ApiOperation(value = "Gets the creditHistories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CreditHistory> findAssociatedCreditHistories(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated creditHistories");
        return customerDetailsService.findAssociatedCreditHistories(id, pageable);
    }

    @GetMapping(value="/{id:.+}/loanApplications")
    @ApiOperation(value = "Gets the loanApplications instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoanApplication> findAssociatedLoanApplications(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated loanApplications");
        return customerDetailsService.findAssociatedLoanApplications(id, pageable);
    }

    @GetMapping(value="/{id:.+}/loginDetailses")
    @ApiOperation(value = "Gets the loginDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LoginDetails> findAssociatedLoginDetailses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated loginDetailses");
        return customerDetailsService.findAssociatedLoginDetailses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomerDetailsService instance
	 */
	protected void setCustomerDetailsService(CustomerDetailsService service) {
		this.customerDetailsService = service;
	}

}
