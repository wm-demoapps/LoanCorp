/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.DownloadResponse;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.loancorpv2.loancorpv2.Kyc;
import com.wavemaker.loancorpv2.loancorpv2.service.KycService;


/**
 * Controller object for domain model class Kyc.
 * @see Kyc
 */
@RestController("loancorpv2.KycController")
@Api(value = "KycController", description = "Exposes APIs to work with Kyc resource.")
@RequestMapping("/loancorpv2/Kyc")
public class KycController {

    private static final Logger LOGGER = LoggerFactory.getLogger(KycController.class);

    @Autowired
	@Qualifier("loancorpv2.KycService")
	private KycService kycService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Kyc instance.")
    @PostMapping
(consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Kyc createKyc(@RequestPart("wm_data_json") Kyc kyc, @RequestPart(value = "kycImage", required = false) MultipartFile _kycImage) {
		LOGGER.debug("Create Kyc with information: {}" , kyc);

    kyc.setKycImage(WMMultipartUtils.toByteArray(_kycImage));
		kyc = kycService.create(kyc);
		LOGGER.debug("Created Kyc with information: {}" , kyc);

	    return kyc;
	}

    @ApiOperation(value = "Returns the Kyc instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Kyc getKyc(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Kyc with id: {}" , id);

        Kyc foundKyc = kycService.getById(id);
        LOGGER.debug("Kyc details with id: {}" , foundKyc);

        return foundKyc;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Kyc instance" )
    @GetMapping(value = "/{id}/content/{fieldName}", produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getKycBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Kyc instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Kyc.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Kyc kyc = kycService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(kyc, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Kyc instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Kyc editKyc(@PathVariable("id") Integer id, @RequestBody Kyc kyc) {
        LOGGER.debug("Editing Kyc with id: {}" , kyc.getId());

        kyc.setId(id);
        kyc = kycService.update(kyc);
        LOGGER.debug("Kyc details with id: {}" , kyc);

        return kyc;
    }
    
    @ApiOperation(value = "Partially updates the Kyc instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Kyc patchKyc(@PathVariable("id") Integer id, @RequestBody @MapTo(Kyc.class) Map<String, Object> kycPatch) {
        LOGGER.debug("Partially updating Kyc with id: {}" , id);

        Kyc kyc = kycService.partialUpdate(id, kycPatch);
        LOGGER.debug("Kyc details after partial update: {}" , kyc);

        return kyc;
    }

    @ApiOperation(value = "Updates the Kyc instance associated with the given id.This API should be used when Kyc instance fields that require multipart data.") 
    @PostMapping(value = "/{id:.+}", consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Kyc editKyc(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Kyc newKyc = WMMultipartUtils.toObject(multipartHttpServletRequest, Kyc.class, "loancorpv2");
        newKyc.setId(id);

        Kyc oldKyc = kycService.getById(id);
        WMMultipartUtils.updateLobsContent(oldKyc, newKyc);
        LOGGER.debug("Updating Kyc with information: {}" , newKyc);

        return kycService.update(newKyc);
    }

    @ApiOperation(value = "Deletes the Kyc instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteKyc(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Kyc with id: {}" , id);

        Kyc deletedKyc = kycService.delete(id);

        return deletedKyc != null;
    }

    /**
     * @deprecated Use {@link #findKycs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Kyc instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Kyc> searchKycsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Kycs list by query filter:{}", (Object) queryFilters);
        return kycService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Kyc instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Kyc> findKycs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Kycs list by filter:", query);
        return kycService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Kyc instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Kyc> filterKycs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Kycs list by filter", query);
        return kycService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportKycs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return kycService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportKycsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Kyc.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> kycService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Kyc instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countKycs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Kycs");
		return kycService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getKycAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return kycService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service KycService instance
	 */
	protected void setKycService(KycService service) {
		this.kycService = service;
	}

}
