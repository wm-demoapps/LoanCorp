/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;

/**
 * Service object for domain model class {@link CreditDetails}.
 */
public interface CreditDetailsService {

    /**
     * Creates a new CreditDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditDetails if any.
     *
     * @param creditDetails Details of the CreditDetails to be created; value cannot be null.
     * @return The newly created CreditDetails.
     */
    CreditDetails create(@Valid CreditDetails creditDetails);


	/**
     * Returns CreditDetails by given id if exists.
     *
     * @param creditdetailsId The id of the CreditDetails to get; value cannot be null.
     * @return CreditDetails associated with the given creditdetailsId.
	 * @throws EntityNotFoundException If no CreditDetails is found.
     */
    CreditDetails getById(Integer creditdetailsId);

    /**
     * Find and return the CreditDetails by given id if exists, returns null otherwise.
     *
     * @param creditdetailsId The id of the CreditDetails to get; value cannot be null.
     * @return CreditDetails associated with the given creditdetailsId.
     */
    CreditDetails findById(Integer creditdetailsId);

	/**
     * Find and return the list of CreditDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param creditdetailsIds The id's of the CreditDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CreditDetails associated with the given creditdetailsIds.
     */
    List<CreditDetails> findByMultipleIds(List<Integer> creditdetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CreditDetails. It replaces all fields of the existing CreditDetails with the given creditDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditDetails if any.
     *
     * @param creditDetails The details of the CreditDetails to be updated; value cannot be null.
     * @return The updated CreditDetails.
     * @throws EntityNotFoundException if no CreditDetails is found with given input.
     */
    CreditDetails update(@Valid CreditDetails creditDetails);


    /**
     * Partially updates the details of an existing CreditDetails. It updates only the
     * fields of the existing CreditDetails which are passed in the creditDetailsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditDetails if any.
     *
     * @param creditdetailsId The id of the CreditDetails to be deleted; value cannot be null.
     * @param creditDetailsPatch The partial data of CreditDetails which is supposed to be updated; value cannot be null.
     * @return The updated CreditDetails.
     * @throws EntityNotFoundException if no CreditDetails is found with given input.
     */
    CreditDetails partialUpdate(Integer creditdetailsId, Map<String, Object> creditDetailsPatch);

    /**
     * Deletes an existing CreditDetails with the given id.
     *
     * @param creditdetailsId The id of the CreditDetails to be deleted; value cannot be null.
     * @return The deleted CreditDetails.
     * @throws EntityNotFoundException if no CreditDetails found with the given id.
     */
    CreditDetails delete(Integer creditdetailsId);

    /**
     * Deletes an existing CreditDetails with the given object.
     *
     * @param creditDetails The instance of the CreditDetails to be deleted; value cannot be null.
     */
    void delete(CreditDetails creditDetails);

    /**
     * Find all CreditDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CreditDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CreditDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<CreditDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all CreditDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CreditDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CreditDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CreditDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
