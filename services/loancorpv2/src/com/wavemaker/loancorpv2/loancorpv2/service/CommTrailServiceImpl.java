/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CommTrail;


/**
 * ServiceImpl object for domain model class CommTrail.
 *
 * @see CommTrail
 */
@Service("loancorpv2.CommTrailService")
@Validated
@EntityService(entityClass = CommTrail.class, serviceId = "loancorpv2")
public class CommTrailServiceImpl implements CommTrailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommTrailServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.CommTrailDao")
    private WMGenericDao<CommTrail, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CommTrail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CommTrail create(CommTrail commTrail) {
        LOGGER.debug("Creating a new CommTrail with information: {}", commTrail);

        CommTrail commTrailCreated = this.wmGenericDao.create(commTrail);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(commTrailCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CommTrail getById(Integer commtrailId) {
        LOGGER.debug("Finding CommTrail by id: {}", commtrailId);
        return this.wmGenericDao.findById(commtrailId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CommTrail findById(Integer commtrailId) {
        LOGGER.debug("Finding CommTrail by id: {}", commtrailId);
        try {
            return this.wmGenericDao.findById(commtrailId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CommTrail found with id: {}", commtrailId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<CommTrail> findByMultipleIds(List<Integer> commtrailIds, boolean orderedReturn) {
        LOGGER.debug("Finding CommTrails by ids: {}", commtrailIds);

        return this.wmGenericDao.findByMultipleIds(commtrailIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public CommTrail update(CommTrail commTrail) {
        LOGGER.debug("Updating CommTrail with information: {}", commTrail);

        this.wmGenericDao.update(commTrail);
        this.wmGenericDao.refresh(commTrail);

        return commTrail;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CommTrail partialUpdate(Integer commtrailId, Map<String, Object>commTrailPatch) {
        LOGGER.debug("Partially Updating the CommTrail with id: {}", commtrailId);

        CommTrail commTrail = getById(commtrailId);

        try {
            ObjectReader commTrailReader = this.objectMapper.reader().forType(CommTrail.class).withValueToUpdate(commTrail);
            commTrail = commTrailReader.readValue(this.objectMapper.writeValueAsString(commTrailPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", commTrailPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        commTrail = update(commTrail);

        return commTrail;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CommTrail delete(Integer commtrailId) {
        LOGGER.debug("Deleting CommTrail with id: {}", commtrailId);
        CommTrail deleted = this.wmGenericDao.findById(commtrailId);
        if (deleted == null) {
            LOGGER.debug("No CommTrail found with id: {}", commtrailId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CommTrail.class.getSimpleName(), commtrailId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(CommTrail commTrail) {
        LOGGER.debug("Deleting CommTrail with {}", commTrail);
        this.wmGenericDao.delete(commTrail);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CommTrail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CommTrails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CommTrail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CommTrails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CommTrail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CommTrail to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
