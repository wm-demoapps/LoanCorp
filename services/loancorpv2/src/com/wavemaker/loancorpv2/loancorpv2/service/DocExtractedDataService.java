/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.DocExtractedData;

/**
 * Service object for domain model class {@link DocExtractedData}.
 */
public interface DocExtractedDataService {

    /**
     * Creates a new DocExtractedData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DocExtractedData if any.
     *
     * @param docExtractedData Details of the DocExtractedData to be created; value cannot be null.
     * @return The newly created DocExtractedData.
     */
    DocExtractedData create(@Valid DocExtractedData docExtractedData);


	/**
     * Returns DocExtractedData by given id if exists.
     *
     * @param docextracteddataId The id of the DocExtractedData to get; value cannot be null.
     * @return DocExtractedData associated with the given docextracteddataId.
	 * @throws EntityNotFoundException If no DocExtractedData is found.
     */
    DocExtractedData getById(Integer docextracteddataId);

    /**
     * Find and return the DocExtractedData by given id if exists, returns null otherwise.
     *
     * @param docextracteddataId The id of the DocExtractedData to get; value cannot be null.
     * @return DocExtractedData associated with the given docextracteddataId.
     */
    DocExtractedData findById(Integer docextracteddataId);

	/**
     * Find and return the list of DocExtractedDatas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param docextracteddataIds The id's of the DocExtractedData to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DocExtractedDatas associated with the given docextracteddataIds.
     */
    List<DocExtractedData> findByMultipleIds(List<Integer> docextracteddataIds, boolean orderedReturn);


    /**
     * Updates the details of an existing DocExtractedData. It replaces all fields of the existing DocExtractedData with the given docExtractedData.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DocExtractedData if any.
     *
     * @param docExtractedData The details of the DocExtractedData to be updated; value cannot be null.
     * @return The updated DocExtractedData.
     * @throws EntityNotFoundException if no DocExtractedData is found with given input.
     */
    DocExtractedData update(@Valid DocExtractedData docExtractedData);


    /**
     * Partially updates the details of an existing DocExtractedData. It updates only the
     * fields of the existing DocExtractedData which are passed in the docExtractedDataPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DocExtractedData if any.
     *
     * @param docextracteddataId The id of the DocExtractedData to be deleted; value cannot be null.
     * @param docExtractedDataPatch The partial data of DocExtractedData which is supposed to be updated; value cannot be null.
     * @return The updated DocExtractedData.
     * @throws EntityNotFoundException if no DocExtractedData is found with given input.
     */
    DocExtractedData partialUpdate(Integer docextracteddataId, Map<String, Object> docExtractedDataPatch);

    /**
     * Deletes an existing DocExtractedData with the given id.
     *
     * @param docextracteddataId The id of the DocExtractedData to be deleted; value cannot be null.
     * @return The deleted DocExtractedData.
     * @throws EntityNotFoundException if no DocExtractedData found with the given id.
     */
    DocExtractedData delete(Integer docextracteddataId);

    /**
     * Deletes an existing DocExtractedData with the given object.
     *
     * @param docExtractedData The instance of the DocExtractedData to be deleted; value cannot be null.
     */
    void delete(DocExtractedData docExtractedData);

    /**
     * Find all DocExtractedDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DocExtractedDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DocExtractedData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DocExtractedDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DocExtractedDatas.
     *
     * @see Pageable
     * @see Page
     */
    Page<DocExtractedData> findAll(String query, Pageable pageable);

    /**
     * Exports all DocExtractedDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DocExtractedDatas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the DocExtractedDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DocExtractedData.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
