/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;
import com.wavemaker.loancorpv2.loancorpv2.CreditHistory;


/**
 * ServiceImpl object for domain model class CreditHistory.
 *
 * @see CreditHistory
 */
@Service("loancorpv2.CreditHistoryService")
@Validated
@EntityService(entityClass = CreditHistory.class, serviceId = "loancorpv2")
public class CreditHistoryServiceImpl implements CreditHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditHistoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("loancorpv2.CreditDetailsService")
    private CreditDetailsService creditDetailsService;

    @Autowired
    @Qualifier("loancorpv2.CreditHistoryDao")
    private WMGenericDao<CreditHistory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CreditHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory create(CreditHistory creditHistory) {
        LOGGER.debug("Creating a new CreditHistory with information: {}", creditHistory);

        CreditHistory creditHistoryCreated = this.wmGenericDao.create(creditHistory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(creditHistoryCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory getById(Integer credithistoryId) {
        LOGGER.debug("Finding CreditHistory by id: {}", credithistoryId);
        return this.wmGenericDao.findById(credithistoryId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory findById(Integer credithistoryId) {
        LOGGER.debug("Finding CreditHistory by id: {}", credithistoryId);
        try {
            return this.wmGenericDao.findById(credithistoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CreditHistory found with id: {}", credithistoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<CreditHistory> findByMultipleIds(List<Integer> credithistoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding CreditHistories by ids: {}", credithistoryIds);

        return this.wmGenericDao.findByMultipleIds(credithistoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory update(CreditHistory creditHistory) {
        LOGGER.debug("Updating CreditHistory with information: {}", creditHistory);

        this.wmGenericDao.update(creditHistory);
        this.wmGenericDao.refresh(creditHistory);

        return creditHistory;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory partialUpdate(Integer credithistoryId, Map<String, Object>creditHistoryPatch) {
        LOGGER.debug("Partially Updating the CreditHistory with id: {}", credithistoryId);

        CreditHistory creditHistory = getById(credithistoryId);

        try {
            ObjectReader creditHistoryReader = this.objectMapper.reader().forType(CreditHistory.class).withValueToUpdate(creditHistory);
            creditHistory = creditHistoryReader.readValue(this.objectMapper.writeValueAsString(creditHistoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", creditHistoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        creditHistory = update(creditHistory);

        return creditHistory;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditHistory delete(Integer credithistoryId) {
        LOGGER.debug("Deleting CreditHistory with id: {}", credithistoryId);
        CreditHistory deleted = this.wmGenericDao.findById(credithistoryId);
        if (deleted == null) {
            LOGGER.debug("No CreditHistory found with id: {}", credithistoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CreditHistory.class.getSimpleName(), credithistoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(CreditHistory creditHistory) {
        LOGGER.debug("Deleting CreditHistory with {}", creditHistory);
        this.wmGenericDao.delete(creditHistory);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CreditHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CreditHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CreditHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CreditHistory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditDetails> findAssociatedCreditDetailses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated creditDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("creditHistory.id = '" + id + "'");

        return creditDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CreditDetailsService instance
     */
    protected void setCreditDetailsService(CreditDetailsService service) {
        this.creditDetailsService = service;
    }

}
