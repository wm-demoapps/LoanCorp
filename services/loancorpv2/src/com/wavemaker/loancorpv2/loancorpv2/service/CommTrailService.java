/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CommTrail;

/**
 * Service object for domain model class {@link CommTrail}.
 */
public interface CommTrailService {

    /**
     * Creates a new CommTrail. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CommTrail if any.
     *
     * @param commTrail Details of the CommTrail to be created; value cannot be null.
     * @return The newly created CommTrail.
     */
    CommTrail create(@Valid CommTrail commTrail);


	/**
     * Returns CommTrail by given id if exists.
     *
     * @param commtrailId The id of the CommTrail to get; value cannot be null.
     * @return CommTrail associated with the given commtrailId.
	 * @throws EntityNotFoundException If no CommTrail is found.
     */
    CommTrail getById(Integer commtrailId);

    /**
     * Find and return the CommTrail by given id if exists, returns null otherwise.
     *
     * @param commtrailId The id of the CommTrail to get; value cannot be null.
     * @return CommTrail associated with the given commtrailId.
     */
    CommTrail findById(Integer commtrailId);

	/**
     * Find and return the list of CommTrails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param commtrailIds The id's of the CommTrail to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CommTrails associated with the given commtrailIds.
     */
    List<CommTrail> findByMultipleIds(List<Integer> commtrailIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CommTrail. It replaces all fields of the existing CommTrail with the given commTrail.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CommTrail if any.
     *
     * @param commTrail The details of the CommTrail to be updated; value cannot be null.
     * @return The updated CommTrail.
     * @throws EntityNotFoundException if no CommTrail is found with given input.
     */
    CommTrail update(@Valid CommTrail commTrail);


    /**
     * Partially updates the details of an existing CommTrail. It updates only the
     * fields of the existing CommTrail which are passed in the commTrailPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CommTrail if any.
     *
     * @param commtrailId The id of the CommTrail to be deleted; value cannot be null.
     * @param commTrailPatch The partial data of CommTrail which is supposed to be updated; value cannot be null.
     * @return The updated CommTrail.
     * @throws EntityNotFoundException if no CommTrail is found with given input.
     */
    CommTrail partialUpdate(Integer commtrailId, Map<String, Object> commTrailPatch);

    /**
     * Deletes an existing CommTrail with the given id.
     *
     * @param commtrailId The id of the CommTrail to be deleted; value cannot be null.
     * @return The deleted CommTrail.
     * @throws EntityNotFoundException if no CommTrail found with the given id.
     */
    CommTrail delete(Integer commtrailId);

    /**
     * Deletes an existing CommTrail with the given object.
     *
     * @param commTrail The instance of the CommTrail to be deleted; value cannot be null.
     */
    void delete(CommTrail commTrail);

    /**
     * Find all CommTrails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CommTrails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CommTrail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CommTrails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CommTrails.
     *
     * @see Pageable
     * @see Page
     */
    Page<CommTrail> findAll(String query, Pageable pageable);

    /**
     * Exports all CommTrails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CommTrails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CommTrails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CommTrail.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
