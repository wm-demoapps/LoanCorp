/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.LoanOffers;

/**
 * Service object for domain model class {@link LoanOffers}.
 */
public interface LoanOffersService {

    /**
     * Creates a new LoanOffers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanOffers if any.
     *
     * @param loanOffers Details of the LoanOffers to be created; value cannot be null.
     * @return The newly created LoanOffers.
     */
    LoanOffers create(@Valid LoanOffers loanOffers);


	/**
     * Returns LoanOffers by given id if exists.
     *
     * @param loanoffersId The id of the LoanOffers to get; value cannot be null.
     * @return LoanOffers associated with the given loanoffersId.
	 * @throws EntityNotFoundException If no LoanOffers is found.
     */
    LoanOffers getById(Integer loanoffersId);

    /**
     * Find and return the LoanOffers by given id if exists, returns null otherwise.
     *
     * @param loanoffersId The id of the LoanOffers to get; value cannot be null.
     * @return LoanOffers associated with the given loanoffersId.
     */
    LoanOffers findById(Integer loanoffersId);

	/**
     * Find and return the list of LoanOffers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param loanoffersIds The id's of the LoanOffers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LoanOffers associated with the given loanoffersIds.
     */
    List<LoanOffers> findByMultipleIds(List<Integer> loanoffersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing LoanOffers. It replaces all fields of the existing LoanOffers with the given loanOffers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanOffers if any.
     *
     * @param loanOffers The details of the LoanOffers to be updated; value cannot be null.
     * @return The updated LoanOffers.
     * @throws EntityNotFoundException if no LoanOffers is found with given input.
     */
    LoanOffers update(@Valid LoanOffers loanOffers);


    /**
     * Partially updates the details of an existing LoanOffers. It updates only the
     * fields of the existing LoanOffers which are passed in the loanOffersPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanOffers if any.
     *
     * @param loanoffersId The id of the LoanOffers to be deleted; value cannot be null.
     * @param loanOffersPatch The partial data of LoanOffers which is supposed to be updated; value cannot be null.
     * @return The updated LoanOffers.
     * @throws EntityNotFoundException if no LoanOffers is found with given input.
     */
    LoanOffers partialUpdate(Integer loanoffersId, Map<String, Object> loanOffersPatch);

    /**
     * Deletes an existing LoanOffers with the given id.
     *
     * @param loanoffersId The id of the LoanOffers to be deleted; value cannot be null.
     * @return The deleted LoanOffers.
     * @throws EntityNotFoundException if no LoanOffers found with the given id.
     */
    LoanOffers delete(Integer loanoffersId);

    /**
     * Deletes an existing LoanOffers with the given object.
     *
     * @param loanOffers The instance of the LoanOffers to be deleted; value cannot be null.
     */
    void delete(LoanOffers loanOffers);

    /**
     * Find all LoanOffers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LoanOffers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LoanOffers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LoanOffers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LoanOffers.
     *
     * @see Pageable
     * @see Page
     */
    Page<LoanOffers> findAll(String query, Pageable pageable);

    /**
     * Exports all LoanOffers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LoanOffers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LoanOffers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LoanOffers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
