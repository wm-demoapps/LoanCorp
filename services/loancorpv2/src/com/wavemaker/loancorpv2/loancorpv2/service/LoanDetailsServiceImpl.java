/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.LoanApplication;
import com.wavemaker.loancorpv2.loancorpv2.LoanDetails;


/**
 * ServiceImpl object for domain model class LoanDetails.
 *
 * @see LoanDetails
 */
@Service("loancorpv2.LoanDetailsService")
@Validated
@EntityService(entityClass = LoanDetails.class, serviceId = "loancorpv2")
public class LoanDetailsServiceImpl implements LoanDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanDetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("loancorpv2.LoanApplicationService")
    private LoanApplicationService loanApplicationService;

    @Autowired
    @Qualifier("loancorpv2.LoanDetailsDao")
    private WMGenericDao<LoanDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LoanDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails create(LoanDetails loanDetails) {
        LOGGER.debug("Creating a new LoanDetails with information: {}", loanDetails);

        LoanDetails loanDetailsCreated = this.wmGenericDao.create(loanDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(loanDetailsCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails getById(Integer loandetailsId) {
        LOGGER.debug("Finding LoanDetails by id: {}", loandetailsId);
        return this.wmGenericDao.findById(loandetailsId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails findById(Integer loandetailsId) {
        LOGGER.debug("Finding LoanDetails by id: {}", loandetailsId);
        try {
            return this.wmGenericDao.findById(loandetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LoanDetails found with id: {}", loandetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<LoanDetails> findByMultipleIds(List<Integer> loandetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding LoanDetails by ids: {}", loandetailsIds);

        return this.wmGenericDao.findByMultipleIds(loandetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails update(LoanDetails loanDetails) {
        LOGGER.debug("Updating LoanDetails with information: {}", loanDetails);

        this.wmGenericDao.update(loanDetails);
        this.wmGenericDao.refresh(loanDetails);

        return loanDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails partialUpdate(Integer loandetailsId, Map<String, Object>loanDetailsPatch) {
        LOGGER.debug("Partially Updating the LoanDetails with id: {}", loandetailsId);

        LoanDetails loanDetails = getById(loandetailsId);

        try {
            ObjectReader loanDetailsReader = this.objectMapper.reader().forType(LoanDetails.class).withValueToUpdate(loanDetails);
            loanDetails = loanDetailsReader.readValue(this.objectMapper.writeValueAsString(loanDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", loanDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        loanDetails = update(loanDetails);

        return loanDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanDetails delete(Integer loandetailsId) {
        LOGGER.debug("Deleting LoanDetails with id: {}", loandetailsId);
        LoanDetails deleted = this.wmGenericDao.findById(loandetailsId);
        if (deleted == null) {
            LOGGER.debug("No LoanDetails found with id: {}", loandetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LoanDetails.class.getSimpleName(), loandetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(LoanDetails loanDetails) {
        LOGGER.debug("Deleting LoanDetails with {}", loanDetails);
        this.wmGenericDao.delete(loanDetails);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LoanDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LoanDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoanDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoanDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanApplication> findAssociatedLoanApplications(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated loanApplications");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("loanDetails.id = '" + id + "'");

        return loanApplicationService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LoanApplicationService instance
     */
    protected void setLoanApplicationService(LoanApplicationService service) {
        this.loanApplicationService = service;
    }

}
