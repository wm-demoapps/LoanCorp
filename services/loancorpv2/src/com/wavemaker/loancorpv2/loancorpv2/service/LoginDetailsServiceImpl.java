/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.LoginDetails;


/**
 * ServiceImpl object for domain model class LoginDetails.
 *
 * @see LoginDetails
 */
@Service("loancorpv2.LoginDetailsService")
@Validated
@EntityService(entityClass = LoginDetails.class, serviceId = "loancorpv2")
public class LoginDetailsServiceImpl implements LoginDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoginDetailsServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.LoginDetailsDao")
    private WMGenericDao<LoginDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LoginDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails create(LoginDetails loginDetails) {
        LOGGER.debug("Creating a new LoginDetails with information: {}", loginDetails);

        LoginDetails loginDetailsCreated = this.wmGenericDao.create(loginDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(loginDetailsCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails getById(Integer logindetailsId) {
        LOGGER.debug("Finding LoginDetails by id: {}", logindetailsId);
        return this.wmGenericDao.findById(logindetailsId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails findById(Integer logindetailsId) {
        LOGGER.debug("Finding LoginDetails by id: {}", logindetailsId);
        try {
            return this.wmGenericDao.findById(logindetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LoginDetails found with id: {}", logindetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<LoginDetails> findByMultipleIds(List<Integer> logindetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding LoginDetails by ids: {}", logindetailsIds);

        return this.wmGenericDao.findByMultipleIds(logindetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails update(LoginDetails loginDetails) {
        LOGGER.debug("Updating LoginDetails with information: {}", loginDetails);

        this.wmGenericDao.update(loginDetails);
        this.wmGenericDao.refresh(loginDetails);

        return loginDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails partialUpdate(Integer logindetailsId, Map<String, Object>loginDetailsPatch) {
        LOGGER.debug("Partially Updating the LoginDetails with id: {}", logindetailsId);

        LoginDetails loginDetails = getById(logindetailsId);

        try {
            ObjectReader loginDetailsReader = this.objectMapper.reader().forType(LoginDetails.class).withValueToUpdate(loginDetails);
            loginDetails = loginDetailsReader.readValue(this.objectMapper.writeValueAsString(loginDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", loginDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        loginDetails = update(loginDetails);

        return loginDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoginDetails delete(Integer logindetailsId) {
        LOGGER.debug("Deleting LoginDetails with id: {}", logindetailsId);
        LoginDetails deleted = this.wmGenericDao.findById(logindetailsId);
        if (deleted == null) {
            LOGGER.debug("No LoginDetails found with id: {}", logindetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LoginDetails.class.getSimpleName(), logindetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(LoginDetails loginDetails) {
        LOGGER.debug("Deleting LoginDetails with {}", loginDetails);
        this.wmGenericDao.delete(loginDetails);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoginDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LoginDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoginDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LoginDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoginDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoginDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
