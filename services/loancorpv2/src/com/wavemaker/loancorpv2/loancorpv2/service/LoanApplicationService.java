/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CommTrail;
import com.wavemaker.loancorpv2.loancorpv2.LoanApplication;
import com.wavemaker.loancorpv2.loancorpv2.LoanOffers;

/**
 * Service object for domain model class {@link LoanApplication}.
 */
public interface LoanApplicationService {

    /**
     * Creates a new LoanApplication. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanApplication if any.
     *
     * @param loanApplication Details of the LoanApplication to be created; value cannot be null.
     * @return The newly created LoanApplication.
     */
    LoanApplication create(@Valid LoanApplication loanApplication);


	/**
     * Returns LoanApplication by given id if exists.
     *
     * @param loanapplicationId The id of the LoanApplication to get; value cannot be null.
     * @return LoanApplication associated with the given loanapplicationId.
	 * @throws EntityNotFoundException If no LoanApplication is found.
     */
    LoanApplication getById(Integer loanapplicationId);

    /**
     * Find and return the LoanApplication by given id if exists, returns null otherwise.
     *
     * @param loanapplicationId The id of the LoanApplication to get; value cannot be null.
     * @return LoanApplication associated with the given loanapplicationId.
     */
    LoanApplication findById(Integer loanapplicationId);

	/**
     * Find and return the list of LoanApplications by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param loanapplicationIds The id's of the LoanApplication to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LoanApplications associated with the given loanapplicationIds.
     */
    List<LoanApplication> findByMultipleIds(List<Integer> loanapplicationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing LoanApplication. It replaces all fields of the existing LoanApplication with the given loanApplication.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanApplication if any.
     *
     * @param loanApplication The details of the LoanApplication to be updated; value cannot be null.
     * @return The updated LoanApplication.
     * @throws EntityNotFoundException if no LoanApplication is found with given input.
     */
    LoanApplication update(@Valid LoanApplication loanApplication);


    /**
     * Partially updates the details of an existing LoanApplication. It updates only the
     * fields of the existing LoanApplication which are passed in the loanApplicationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LoanApplication if any.
     *
     * @param loanapplicationId The id of the LoanApplication to be deleted; value cannot be null.
     * @param loanApplicationPatch The partial data of LoanApplication which is supposed to be updated; value cannot be null.
     * @return The updated LoanApplication.
     * @throws EntityNotFoundException if no LoanApplication is found with given input.
     */
    LoanApplication partialUpdate(Integer loanapplicationId, Map<String, Object> loanApplicationPatch);

    /**
     * Deletes an existing LoanApplication with the given id.
     *
     * @param loanapplicationId The id of the LoanApplication to be deleted; value cannot be null.
     * @return The deleted LoanApplication.
     * @throws EntityNotFoundException if no LoanApplication found with the given id.
     */
    LoanApplication delete(Integer loanapplicationId);

    /**
     * Deletes an existing LoanApplication with the given object.
     *
     * @param loanApplication The instance of the LoanApplication to be deleted; value cannot be null.
     */
    void delete(LoanApplication loanApplication);

    /**
     * Find all LoanApplications matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LoanApplications.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LoanApplication> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LoanApplications matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LoanApplications.
     *
     * @see Pageable
     * @see Page
     */
    Page<LoanApplication> findAll(String query, Pageable pageable);

    /**
     * Exports all LoanApplications matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LoanApplications matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LoanApplications in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LoanApplication.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated commTrails for given LoanApplication id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CommTrail instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CommTrail> findAssociatedCommTrails(Integer id, Pageable pageable);

    /*
     * Returns the associated loanOfferses for given LoanApplication id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LoanOffers instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LoanOffers> findAssociatedLoanOfferses(Integer id, Pageable pageable);

}
