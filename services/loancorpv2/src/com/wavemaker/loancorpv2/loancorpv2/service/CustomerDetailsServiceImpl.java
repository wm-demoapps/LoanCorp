/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CreditHistory;
import com.wavemaker.loancorpv2.loancorpv2.CustomerDetails;
import com.wavemaker.loancorpv2.loancorpv2.LoanApplication;
import com.wavemaker.loancorpv2.loancorpv2.LoginDetails;


/**
 * ServiceImpl object for domain model class CustomerDetails.
 *
 * @see CustomerDetails
 */
@Service("loancorpv2.CustomerDetailsService")
@Validated
@EntityService(entityClass = CustomerDetails.class, serviceId = "loancorpv2")
public class CustomerDetailsServiceImpl implements CustomerDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerDetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("loancorpv2.LoanApplicationService")
    private LoanApplicationService loanApplicationService;

    @Lazy
    @Autowired
    @Qualifier("loancorpv2.CreditHistoryService")
    private CreditHistoryService creditHistoryService;

    @Lazy
    @Autowired
    @Qualifier("loancorpv2.LoginDetailsService")
    private LoginDetailsService loginDetailsService;

    @Autowired
    @Qualifier("loancorpv2.CustomerDetailsDao")
    private WMGenericDao<CustomerDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CustomerDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails create(CustomerDetails customerDetails) {
        LOGGER.debug("Creating a new CustomerDetails with information: {}", customerDetails);

        CustomerDetails customerDetailsCreated = this.wmGenericDao.create(customerDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(customerDetailsCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails getById(Integer customerdetailsId) {
        LOGGER.debug("Finding CustomerDetails by id: {}", customerdetailsId);
        return this.wmGenericDao.findById(customerdetailsId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails findById(Integer customerdetailsId) {
        LOGGER.debug("Finding CustomerDetails by id: {}", customerdetailsId);
        try {
            return this.wmGenericDao.findById(customerdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CustomerDetails found with id: {}", customerdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<CustomerDetails> findByMultipleIds(List<Integer> customerdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding CustomerDetails by ids: {}", customerdetailsIds);

        return this.wmGenericDao.findByMultipleIds(customerdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails update(CustomerDetails customerDetails) {
        LOGGER.debug("Updating CustomerDetails with information: {}", customerDetails);

        this.wmGenericDao.update(customerDetails);
        this.wmGenericDao.refresh(customerDetails);

        return customerDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails partialUpdate(Integer customerdetailsId, Map<String, Object>customerDetailsPatch) {
        LOGGER.debug("Partially Updating the CustomerDetails with id: {}", customerdetailsId);

        CustomerDetails customerDetails = getById(customerdetailsId);

        try {
            ObjectReader customerDetailsReader = this.objectMapper.reader().forType(CustomerDetails.class).withValueToUpdate(customerDetails);
            customerDetails = customerDetailsReader.readValue(this.objectMapper.writeValueAsString(customerDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", customerDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        customerDetails = update(customerDetails);

        return customerDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CustomerDetails delete(Integer customerdetailsId) {
        LOGGER.debug("Deleting CustomerDetails with id: {}", customerdetailsId);
        CustomerDetails deleted = this.wmGenericDao.findById(customerdetailsId);
        if (deleted == null) {
            LOGGER.debug("No CustomerDetails found with id: {}", customerdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CustomerDetails.class.getSimpleName(), customerdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(CustomerDetails customerDetails) {
        LOGGER.debug("Deleting CustomerDetails with {}", customerDetails);
        this.wmGenericDao.delete(customerDetails);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CustomerDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CustomerDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CustomerDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CustomerDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CustomerDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CustomerDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditHistory> findAssociatedCreditHistories(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated creditHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customerDetails.id = '" + id + "'");

        return creditHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanApplication> findAssociatedLoanApplications(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated loanApplications");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customerDetails.id = '" + id + "'");

        return loanApplicationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoginDetails> findAssociatedLoginDetailses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated loginDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customerDetails.id = '" + id + "'");

        return loginDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LoanApplicationService instance
     */
    protected void setLoanApplicationService(LoanApplicationService service) {
        this.loanApplicationService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CreditHistoryService instance
     */
    protected void setCreditHistoryService(CreditHistoryService service) {
        this.creditHistoryService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LoginDetailsService instance
     */
    protected void setLoginDetailsService(LoginDetailsService service) {
        this.loginDetailsService = service;
    }

}
