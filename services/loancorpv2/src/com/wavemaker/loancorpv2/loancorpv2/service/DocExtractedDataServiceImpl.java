/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.DocExtractedData;


/**
 * ServiceImpl object for domain model class DocExtractedData.
 *
 * @see DocExtractedData
 */
@Service("loancorpv2.DocExtractedDataService")
@Validated
@EntityService(entityClass = DocExtractedData.class, serviceId = "loancorpv2")
public class DocExtractedDataServiceImpl implements DocExtractedDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocExtractedDataServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.DocExtractedDataDao")
    private WMGenericDao<DocExtractedData, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<DocExtractedData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData create(DocExtractedData docExtractedData) {
        LOGGER.debug("Creating a new DocExtractedData with information: {}", docExtractedData);

        DocExtractedData docExtractedDataCreated = this.wmGenericDao.create(docExtractedData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(docExtractedDataCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData getById(Integer docextracteddataId) {
        LOGGER.debug("Finding DocExtractedData by id: {}", docextracteddataId);
        return this.wmGenericDao.findById(docextracteddataId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData findById(Integer docextracteddataId) {
        LOGGER.debug("Finding DocExtractedData by id: {}", docextracteddataId);
        try {
            return this.wmGenericDao.findById(docextracteddataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DocExtractedData found with id: {}", docextracteddataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<DocExtractedData> findByMultipleIds(List<Integer> docextracteddataIds, boolean orderedReturn) {
        LOGGER.debug("Finding DocExtractedDatas by ids: {}", docextracteddataIds);

        return this.wmGenericDao.findByMultipleIds(docextracteddataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData update(DocExtractedData docExtractedData) {
        LOGGER.debug("Updating DocExtractedData with information: {}", docExtractedData);

        this.wmGenericDao.update(docExtractedData);
        this.wmGenericDao.refresh(docExtractedData);

        return docExtractedData;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData partialUpdate(Integer docextracteddataId, Map<String, Object>docExtractedDataPatch) {
        LOGGER.debug("Partially Updating the DocExtractedData with id: {}", docextracteddataId);

        DocExtractedData docExtractedData = getById(docextracteddataId);

        try {
            ObjectReader docExtractedDataReader = this.objectMapper.reader().forType(DocExtractedData.class).withValueToUpdate(docExtractedData);
            docExtractedData = docExtractedDataReader.readValue(this.objectMapper.writeValueAsString(docExtractedDataPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", docExtractedDataPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        docExtractedData = update(docExtractedData);

        return docExtractedData;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public DocExtractedData delete(Integer docextracteddataId) {
        LOGGER.debug("Deleting DocExtractedData with id: {}", docextracteddataId);
        DocExtractedData deleted = this.wmGenericDao.findById(docextracteddataId);
        if (deleted == null) {
            LOGGER.debug("No DocExtractedData found with id: {}", docextracteddataId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DocExtractedData.class.getSimpleName(), docextracteddataId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(DocExtractedData docExtractedData) {
        LOGGER.debug("Deleting DocExtractedData with {}", docExtractedData);
        this.wmGenericDao.delete(docExtractedData);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<DocExtractedData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DocExtractedDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<DocExtractedData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DocExtractedDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table DocExtractedData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table DocExtractedData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
