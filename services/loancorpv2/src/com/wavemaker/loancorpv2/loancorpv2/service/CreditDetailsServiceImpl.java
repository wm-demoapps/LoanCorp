/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;


/**
 * ServiceImpl object for domain model class CreditDetails.
 *
 * @see CreditDetails
 */
@Service("loancorpv2.CreditDetailsService")
@Validated
@EntityService(entityClass = CreditDetails.class, serviceId = "loancorpv2")
public class CreditDetailsServiceImpl implements CreditDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditDetailsServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.CreditDetailsDao")
    private WMGenericDao<CreditDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CreditDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails create(CreditDetails creditDetails) {
        LOGGER.debug("Creating a new CreditDetails with information: {}", creditDetails);

        CreditDetails creditDetailsCreated = this.wmGenericDao.create(creditDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(creditDetailsCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails getById(Integer creditdetailsId) {
        LOGGER.debug("Finding CreditDetails by id: {}", creditdetailsId);
        return this.wmGenericDao.findById(creditdetailsId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails findById(Integer creditdetailsId) {
        LOGGER.debug("Finding CreditDetails by id: {}", creditdetailsId);
        try {
            return this.wmGenericDao.findById(creditdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CreditDetails found with id: {}", creditdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<CreditDetails> findByMultipleIds(List<Integer> creditdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding CreditDetails by ids: {}", creditdetailsIds);

        return this.wmGenericDao.findByMultipleIds(creditdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails update(CreditDetails creditDetails) {
        LOGGER.debug("Updating CreditDetails with information: {}", creditDetails);

        this.wmGenericDao.update(creditDetails);
        this.wmGenericDao.refresh(creditDetails);

        return creditDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails partialUpdate(Integer creditdetailsId, Map<String, Object>creditDetailsPatch) {
        LOGGER.debug("Partially Updating the CreditDetails with id: {}", creditdetailsId);

        CreditDetails creditDetails = getById(creditdetailsId);

        try {
            ObjectReader creditDetailsReader = this.objectMapper.reader().forType(CreditDetails.class).withValueToUpdate(creditDetails);
            creditDetails = creditDetailsReader.readValue(this.objectMapper.writeValueAsString(creditDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", creditDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        creditDetails = update(creditDetails);

        return creditDetails;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public CreditDetails delete(Integer creditdetailsId) {
        LOGGER.debug("Deleting CreditDetails with id: {}", creditdetailsId);
        CreditDetails deleted = this.wmGenericDao.findById(creditdetailsId);
        if (deleted == null) {
            LOGGER.debug("No CreditDetails found with id: {}", creditdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CreditDetails.class.getSimpleName(), creditdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(CreditDetails creditDetails) {
        LOGGER.debug("Deleting CreditDetails with {}", creditDetails);
        this.wmGenericDao.delete(creditDetails);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CreditDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<CreditDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CreditDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CreditDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table CreditDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
