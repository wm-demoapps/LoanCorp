/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.Kyc;

/**
 * Service object for domain model class {@link Kyc}.
 */
public interface KycService {

    /**
     * Creates a new Kyc. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Kyc if any.
     *
     * @param kyc Details of the Kyc to be created; value cannot be null.
     * @return The newly created Kyc.
     */
    Kyc create(@Valid Kyc kyc);


	/**
     * Returns Kyc by given id if exists.
     *
     * @param kycId The id of the Kyc to get; value cannot be null.
     * @return Kyc associated with the given kycId.
	 * @throws EntityNotFoundException If no Kyc is found.
     */
    Kyc getById(Integer kycId);

    /**
     * Find and return the Kyc by given id if exists, returns null otherwise.
     *
     * @param kycId The id of the Kyc to get; value cannot be null.
     * @return Kyc associated with the given kycId.
     */
    Kyc findById(Integer kycId);

	/**
     * Find and return the list of Kycs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param kycIds The id's of the Kyc to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Kycs associated with the given kycIds.
     */
    List<Kyc> findByMultipleIds(List<Integer> kycIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Kyc. It replaces all fields of the existing Kyc with the given kyc.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Kyc if any.
     *
     * @param kyc The details of the Kyc to be updated; value cannot be null.
     * @return The updated Kyc.
     * @throws EntityNotFoundException if no Kyc is found with given input.
     */
    Kyc update(@Valid Kyc kyc);


    /**
     * Partially updates the details of an existing Kyc. It updates only the
     * fields of the existing Kyc which are passed in the kycPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Kyc if any.
     *
     * @param kycId The id of the Kyc to be deleted; value cannot be null.
     * @param kycPatch The partial data of Kyc which is supposed to be updated; value cannot be null.
     * @return The updated Kyc.
     * @throws EntityNotFoundException if no Kyc is found with given input.
     */
    Kyc partialUpdate(Integer kycId, Map<String, Object> kycPatch);

    /**
     * Deletes an existing Kyc with the given id.
     *
     * @param kycId The id of the Kyc to be deleted; value cannot be null.
     * @return The deleted Kyc.
     * @throws EntityNotFoundException if no Kyc found with the given id.
     */
    Kyc delete(Integer kycId);

    /**
     * Deletes an existing Kyc with the given object.
     *
     * @param kyc The instance of the Kyc to be deleted; value cannot be null.
     */
    void delete(Kyc kyc);

    /**
     * Find all Kycs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Kycs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Kyc> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Kycs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Kycs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Kyc> findAll(String query, Pageable pageable);

    /**
     * Exports all Kycs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Kycs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Kycs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Kyc.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
