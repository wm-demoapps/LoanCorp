/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.Kyc;


/**
 * ServiceImpl object for domain model class Kyc.
 *
 * @see Kyc
 */
@Service("loancorpv2.KycService")
@Validated
@EntityService(entityClass = Kyc.class, serviceId = "loancorpv2")
public class KycServiceImpl implements KycService {

    private static final Logger LOGGER = LoggerFactory.getLogger(KycServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.KycDao")
    private WMGenericDao<Kyc, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Kyc, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public Kyc create(Kyc kyc) {
        LOGGER.debug("Creating a new Kyc with information: {}", kyc);

        Kyc kycCreated = this.wmGenericDao.create(kyc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(kycCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Kyc getById(Integer kycId) {
        LOGGER.debug("Finding Kyc by id: {}", kycId);
        return this.wmGenericDao.findById(kycId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Kyc findById(Integer kycId) {
        LOGGER.debug("Finding Kyc by id: {}", kycId);
        try {
            return this.wmGenericDao.findById(kycId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Kyc found with id: {}", kycId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<Kyc> findByMultipleIds(List<Integer> kycIds, boolean orderedReturn) {
        LOGGER.debug("Finding Kycs by ids: {}", kycIds);

        return this.wmGenericDao.findByMultipleIds(kycIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public Kyc update(Kyc kyc) {
        LOGGER.debug("Updating Kyc with information: {}", kyc);

        this.wmGenericDao.update(kyc);
        this.wmGenericDao.refresh(kyc);

        return kyc;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public Kyc partialUpdate(Integer kycId, Map<String, Object>kycPatch) {
        LOGGER.debug("Partially Updating the Kyc with id: {}", kycId);

        Kyc kyc = getById(kycId);

        try {
            ObjectReader kycReader = this.objectMapper.reader().forType(Kyc.class).withValueToUpdate(kyc);
            kyc = kycReader.readValue(this.objectMapper.writeValueAsString(kycPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", kycPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        kyc = update(kyc);

        return kyc;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public Kyc delete(Integer kycId) {
        LOGGER.debug("Deleting Kyc with id: {}", kycId);
        Kyc deleted = this.wmGenericDao.findById(kycId);
        if (deleted == null) {
            LOGGER.debug("No Kyc found with id: {}", kycId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Kyc.class.getSimpleName(), kycId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(Kyc kyc) {
        LOGGER.debug("Deleting Kyc with {}", kyc);
        this.wmGenericDao.delete(kyc);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Kyc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Kycs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Kyc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Kycs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table Kyc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table Kyc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
