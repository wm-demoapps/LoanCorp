/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.CreditDetails;
import com.wavemaker.loancorpv2.loancorpv2.CreditHistory;

/**
 * Service object for domain model class {@link CreditHistory}.
 */
public interface CreditHistoryService {

    /**
     * Creates a new CreditHistory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditHistory if any.
     *
     * @param creditHistory Details of the CreditHistory to be created; value cannot be null.
     * @return The newly created CreditHistory.
     */
    CreditHistory create(@Valid CreditHistory creditHistory);


	/**
     * Returns CreditHistory by given id if exists.
     *
     * @param credithistoryId The id of the CreditHistory to get; value cannot be null.
     * @return CreditHistory associated with the given credithistoryId.
	 * @throws EntityNotFoundException If no CreditHistory is found.
     */
    CreditHistory getById(Integer credithistoryId);

    /**
     * Find and return the CreditHistory by given id if exists, returns null otherwise.
     *
     * @param credithistoryId The id of the CreditHistory to get; value cannot be null.
     * @return CreditHistory associated with the given credithistoryId.
     */
    CreditHistory findById(Integer credithistoryId);

	/**
     * Find and return the list of CreditHistories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param credithistoryIds The id's of the CreditHistory to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CreditHistories associated with the given credithistoryIds.
     */
    List<CreditHistory> findByMultipleIds(List<Integer> credithistoryIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CreditHistory. It replaces all fields of the existing CreditHistory with the given creditHistory.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditHistory if any.
     *
     * @param creditHistory The details of the CreditHistory to be updated; value cannot be null.
     * @return The updated CreditHistory.
     * @throws EntityNotFoundException if no CreditHistory is found with given input.
     */
    CreditHistory update(@Valid CreditHistory creditHistory);


    /**
     * Partially updates the details of an existing CreditHistory. It updates only the
     * fields of the existing CreditHistory which are passed in the creditHistoryPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditHistory if any.
     *
     * @param credithistoryId The id of the CreditHistory to be deleted; value cannot be null.
     * @param creditHistoryPatch The partial data of CreditHistory which is supposed to be updated; value cannot be null.
     * @return The updated CreditHistory.
     * @throws EntityNotFoundException if no CreditHistory is found with given input.
     */
    CreditHistory partialUpdate(Integer credithistoryId, Map<String, Object> creditHistoryPatch);

    /**
     * Deletes an existing CreditHistory with the given id.
     *
     * @param credithistoryId The id of the CreditHistory to be deleted; value cannot be null.
     * @return The deleted CreditHistory.
     * @throws EntityNotFoundException if no CreditHistory found with the given id.
     */
    CreditHistory delete(Integer credithistoryId);

    /**
     * Deletes an existing CreditHistory with the given object.
     *
     * @param creditHistory The instance of the CreditHistory to be deleted; value cannot be null.
     */
    void delete(CreditHistory creditHistory);

    /**
     * Find all CreditHistories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditHistories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CreditHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CreditHistories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditHistories.
     *
     * @see Pageable
     * @see Page
     */
    Page<CreditHistory> findAll(String query, Pageable pageable);

    /**
     * Exports all CreditHistories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CreditHistories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CreditHistories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CreditHistory.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated creditDetailses for given CreditHistory id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CreditDetails instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CreditDetails> findAssociatedCreditDetailses(Integer id, Pageable pageable);

}
