/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.loancorpv2.loancorpv2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.loancorpv2.loancorpv2.LoanOffers;


/**
 * ServiceImpl object for domain model class LoanOffers.
 *
 * @see LoanOffers
 */
@Service("loancorpv2.LoanOffersService")
@Validated
@EntityService(entityClass = LoanOffers.class, serviceId = "loancorpv2")
public class LoanOffersServiceImpl implements LoanOffersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanOffersServiceImpl.class);


    @Autowired
    @Qualifier("loancorpv2.LoanOffersDao")
    private WMGenericDao<LoanOffers, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LoanOffers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers create(LoanOffers loanOffers) {
        LOGGER.debug("Creating a new LoanOffers with information: {}", loanOffers);

        LoanOffers loanOffersCreated = this.wmGenericDao.create(loanOffers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(loanOffersCreated);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers getById(Integer loanoffersId) {
        LOGGER.debug("Finding LoanOffers by id: {}", loanoffersId);
        return this.wmGenericDao.findById(loanoffersId);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers findById(Integer loanoffersId) {
        LOGGER.debug("Finding LoanOffers by id: {}", loanoffersId);
        try {
            return this.wmGenericDao.findById(loanoffersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LoanOffers found with id: {}", loanoffersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public List<LoanOffers> findByMultipleIds(List<Integer> loanoffersIds, boolean orderedReturn) {
        LOGGER.debug("Finding LoanOffers by ids: {}", loanoffersIds);

        return this.wmGenericDao.findByMultipleIds(loanoffersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers update(LoanOffers loanOffers) {
        LOGGER.debug("Updating LoanOffers with information: {}", loanOffers);

        this.wmGenericDao.update(loanOffers);
        this.wmGenericDao.refresh(loanOffers);

        return loanOffers;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers partialUpdate(Integer loanoffersId, Map<String, Object>loanOffersPatch) {
        LOGGER.debug("Partially Updating the LoanOffers with id: {}", loanoffersId);

        LoanOffers loanOffers = getById(loanoffersId);

        try {
            ObjectReader loanOffersReader = this.objectMapper.reader().forType(LoanOffers.class).withValueToUpdate(loanOffers);
            loanOffers = loanOffersReader.readValue(this.objectMapper.writeValueAsString(loanOffersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", loanOffersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        loanOffers = update(loanOffers);

        return loanOffers;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public LoanOffers delete(Integer loanoffersId) {
        LOGGER.debug("Deleting LoanOffers with id: {}", loanoffersId);
        LoanOffers deleted = this.wmGenericDao.findById(loanoffersId);
        if (deleted == null) {
            LOGGER.debug("No LoanOffers found with id: {}", loanoffersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LoanOffers.class.getSimpleName(), loanoffersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "loancorpv2TransactionManager")
    @Override
    public void delete(LoanOffers loanOffers) {
        LOGGER.debug("Deleting LoanOffers with {}", loanOffers);
        this.wmGenericDao.delete(loanOffers);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanOffers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LoanOffers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<LoanOffers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LoanOffers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoanOffers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service loancorpv2 for table LoanOffers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "loancorpv2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
